name: Hugo CI/CD - Multi-Author Blog

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Weekly security scan at 2 AM UTC on Sundays
    - cron: '0 2 * * 0'

env:
  HUGO_VERSION: '0.147.5'
  NODE_VERSION: '20'

jobs:
  validate:
    name: 🔍 Validate Content & Security
    runs-on: ubuntu-latest
    outputs:
      authors-changed: ${{ steps.changes.outputs.authors }}
      posts-changed: ${{ steps.changes.outputs.posts }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            authors:
              - 'data/authors.json'
            posts:
              - 'content/posts/**'
            config:
              - 'hugo.toml'
              - 'package.json'
              - 'tsconfig.json'
              - '.github/workflows/**'
            components:
              - 'assets/js/**'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          echo "📦 Dependencies installed successfully"

      - name: 🔒 Security Audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level moderate
          echo "✅ Security audit completed"

      - name: 📝 Lint Markdown
        run: |
          echo "📝 Linting markdown files..."
          find content -name "*.md" -type f | head -10 | while read file; do
            echo "Checking: $file"
            # Basic markdown validation
            if ! grep -q "^---" "$file"; then
              echo "⚠️  Missing front matter in $file"
            else
              echo "✅ $file has front matter"
            fi
          done

      - name: ✅ Validate Author Data
        run: |
          echo "🔍 Validating author data structure..."
          node -e "
            const fs = require('fs');

            if (!fs.existsSync('data/authors.json')) {
              console.log('⚠️  Authors file not found, skipping validation');
              process.exit(0);
            }

            const authors = JSON.parse(fs.readFileSync('data/authors.json', 'utf8'));

            if (!authors || typeof authors !== 'object') {
              throw new Error('Authors data must be a valid object');
            }

            Object.entries(authors).forEach(([id, author]) => {
              const required = ['name', 'bio', 'avatar'];
              required.forEach(field => {
                if (!author[field]) {
                  throw new Error(\`Author \${id} missing required field: \${field}\`);
                }
              });

              if (author.avatar && !author.avatar.startsWith('http')) {
                console.warn(\`Warning: Author \${author.name} avatar should be a full URL\`);
              }

              if (author.bio && author.bio.length > 250) {
                console.warn(\`Warning: Author \${author.name} bio is longer than 250 characters\`);
              }
            });

            console.log('✅ Author data validation passed');
          "

      - name: 🏷️ Validate Post Front Matter
        run: |
          echo "🔍 Validating post front matter..."

          if [ ! -d "content/posts" ]; then
            echo "⚠️  No posts directory found, skipping validation"
            exit 0
          fi

          find content/posts -name "*.md" -type f | while read file; do
            echo "Checking: $file"

            # Check if file has front matter
            if ! grep -q "^---" "$file"; then
              echo "❌ Missing front matter in $file"
              exit 1
            fi

            # Check for required fields
            if ! grep -q "^title:" "$file"; then
              echo "❌ Missing title in $file"
              exit 1
            fi

            if ! grep -q "^date:" "$file"; then
              echo "❌ Missing date in $file"
              exit 1
            fi

            echo "✅ $file validated"
          done

      - name: 🔧 Lint TypeScript/JavaScript
        run: |
          echo "🔧 Linting TypeScript and JavaScript files..."
          npm run lint
          echo "✅ Code linting completed"

      - name: 🎨 Check Code Formatting
        run: |
          echo "🎨 Checking code formatting..."
          npm run format:check
          echo "✅ Code formatting check completed"

  test:
    name: 🧪 Run Tests
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          echo "📦 Dependencies installed for testing"

      - name: 🔬 Run Unit Tests
        run: |
          echo "🔬 Running unit tests..."
          npm run test:coverage
          echo "✅ Unit tests completed"

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v5
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: 🦄 Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: 🎭 Install Playwright Browsers
        run: |
          echo "🎭 Installing Playwright browsers..."
          npx playwright install --with-deps chromium firefox webkit
          echo "✅ All Playwright browsers installed"

      - name: 🎭 Run E2E Tests
        run: |
          echo "🎭 Running end-to-end tests..."
          # Build first for E2E tests
          npm run build
          echo "✅ Build completed for E2E tests"

          # Run E2E tests with proper reporters for CI
          npm run test:e2e -- --reporter=html --reporter=github --max-failures=5
          echo "✅ E2E tests completed"
        env:
          CI: true

      - name: 📤 Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  build:
    name: 🏗️ Build Site
    needs: [validate, test]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          echo "📦 Dependencies installed for build"

      - name: ⚛️ Build React Components
        run: |
          echo "🔨 Building React components..."
          npm run build
          echo "✅ React build completed"

          # Verify build output
          if [ -f "static/js/main.js" ]; then
            echo "✅ Main JavaScript bundle created"
            ls -la static/js/
          else
            echo "❌ Main JavaScript bundle not found"
            exit 1
          fi

      - name: 🦄 Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: 🚀 Build Hugo Site
        run: |
          echo "🔨 Building Hugo site..."
          hugo --minify --gc
          echo "✅ Hugo build completed"

          # Verify Hugo build
          if [ -f "public/index.html" ]; then
            echo "✅ Hugo site generated successfully"
          else
            echo "❌ Hugo site generation failed"
            exit 1
          fi

      - name: 🔍 Check Build Quality
        run: |
          echo "🔍 Checking build quality..."

          # Check for broken internal links
          echo "Checking internal links..."
          find public -name "*.html" -exec grep -l "href=\"/" {} \; | head -5 | while read file; do
            echo "Checking links in $(basename $file)"
            # Basic link validation
            grep -o 'href="[^"]*"' "$file" | grep -o '/[^"]*' | head -5 | while read link; do
              if [ -f "public$link" ] || [ -f "public${link}index.html" ] || [ -d "public$link" ]; then
                echo "✅ $link"
              else
                echo "⚠️  Potential broken link: $link"
              fi
            done
          done

          # Check bundle sizes
          echo "Bundle size analysis:"
          find static/js -name "*.js" | while read file; do
            size=$(wc -c < "$file")
            echo "$(basename $file): ${size} bytes"
            if [ $size -gt 1048576 ]; then  # 1MB
              echo "⚠️  Large bundle detected: $(basename $file)"
            fi
          done

      - name: 📊 Generate Build Report
        run: |
          echo "📊 Build Report" > build-report.txt
          echo "===============" >> build-report.txt
          echo "Build Date: $(date)" >> build-report.txt
          echo "Commit: ${{ github.sha }}" >> build-report.txt
          echo "Hugo Version: ${{ env.HUGO_VERSION }}" >> build-report.txt
          echo "Node Version: ${{ env.NODE_VERSION }}" >> build-report.txt
          echo "" >> build-report.txt

          echo "📄 Pages Generated:" >> build-report.txt
          find public -name "*.html" | wc -l >> build-report.txt

          echo "" >> build-report.txt
          echo "📁 JavaScript Assets:" >> build-report.txt
          find public -name "*.js" | wc -l >> build-report.txt

          echo "" >> build-report.txt
          echo "📁 CSS Assets:" >> build-report.txt
          find public -name "*.css" | wc -l >> build-report.txt

          echo "" >> build-report.txt
          echo "📦 Total Site Size:" >> build-report.txt
          du -sh public/ | cut -f1 >> build-report.txt

          echo "" >> build-report.txt
          echo "🔗 Sample URLs Generated:" >> build-report.txt
          find public -name "index.html" | head -5 | sed 's|public||g' >> build-report.txt

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hugo-site
          path: public
          retention-days: 7

      - name: 📤 Upload Build Report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.txt
          retention-days: 30

  tag:
    name: 🏷️ Generate Tags & Release
    needs: [validate, test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
      release_created: ${{ steps.tag_version.outputs.release_created }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Analyze Commits for Version Bump
        id: analyze_commits
        run: |
          echo "🔍 Analyzing commits since last tag..."

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Get commits since last tag
          COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline --no-merges)
          echo "Commits since last tag:"
          echo "$COMMITS"

          # Analyze commit types for semantic versioning
          MAJOR_BUMP=false
          MINOR_BUMP=false
          PATCH_BUMP=false

          while IFS= read -r commit; do
            if [[ $commit == *"BREAKING CHANGE"* ]] || [[ $commit == *"feat!"* ]] || [[ $commit == *"fix!"* ]]; then
              MAJOR_BUMP=true
              echo "🚨 Major version bump detected: $commit"
            elif [[ $commit == *"feat:"* ]] || [[ $commit == *"feat("* ]]; then
              MINOR_BUMP=true
              echo "✨ Minor version bump detected: $commit"
            elif [[ $commit == *"fix:"* ]] || [[ $commit == *"fix("* ]] || [[ $commit == *"perf:"* ]] || [[ $commit == *"perf("* ]]; then
              PATCH_BUMP=true
              echo "🐛 Patch version bump detected: $commit"
            fi
          done <<< "$COMMITS"

          # Determine version bump type
          if [ "$MAJOR_BUMP" = true ]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "🚨 Will create MAJOR version bump"
          elif [ "$MINOR_BUMP" = true ]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "✨ Will create MINOR version bump"
          elif [ "$PATCH_BUMP" = true ]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "🐛 Will create PATCH version bump"
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "ℹ️ No version bump needed"
          fi

          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: 🧹 Clean up problematic tags
        if: steps.analyze_commits.outputs.bump_type != 'none'
        run: |
          echo "🧹 Checking for problematic tags..."
          # Remove vskip tag if it exists
          if git tag -l | grep -q "^vskip$"; then
            echo "Removing problematic vskip tag..."
            git tag -d vskip || true
            git push --delete origin vskip || true
            echo "✅ Cleaned up vskip tag"
          fi

      - name: 🏷️ Generate New Version Tag
        id: tag_version
        if: steps.analyze_commits.outputs.bump_type != 'none'
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ steps.analyze_commits.outputs.bump_type }}
          tag_prefix: 'v'
          release_branches: 'main'
          create_annotated_tag: true

      - name: 📝 Generate Changelog
        id: changelog
        if: steps.tag_version.outputs.new_tag
        run: |
          echo "📝 Generating changelog for ${{ steps.tag_version.outputs.new_tag }}..."

          PREVIOUS_TAG="${{ steps.analyze_commits.outputs.latest_tag }}"
          NEW_TAG="${{ steps.tag_version.outputs.new_tag }}"

          # Initialize changelog file
          cat > changelog_temp.md << 'EOF'
          ## 🚀 What's Changed in ${{ steps.tag_version.outputs.new_tag }}

          ### 📅 Release Date
          EOF
          echo "$(date '+%Y-%m-%d %H:%M:%S UTC')" >> changelog_temp.md
          echo "" >> changelog_temp.md
          echo "### 📊 Commits Since ${PREVIOUS_TAG}" >> changelog_temp.md
          echo "" >> changelog_temp.md

          # Initialize sections
          FEATURES=""
          FIXES=""
          DOCS=""
          STYLE=""
          PERF=""
          TESTS=""
          CI=""
          OTHER=""

          # Get commits and categorize them
          while IFS= read -r commit; do
            if [[ $commit == *"feat:"* ]] || [[ $commit == *"feat("* ]]; then
              FEATURES="${FEATURES}- ${commit}\n"
            elif [[ $commit == *"fix:"* ]] || [[ $commit == *"fix("* ]]; then
              FIXES="${FIXES}- ${commit}\n"
            elif [[ $commit == *"docs:"* ]] || [[ $commit == *"docs("* ]]; then
              DOCS="${DOCS}- ${commit}\n"
            elif [[ $commit == *"style:"* ]] || [[ $commit == *"refactor:"* ]]; then
              STYLE="${STYLE}- ${commit}\n"
            elif [[ $commit == *"perf:"* ]] || [[ $commit == *"perf("* ]]; then
              PERF="${PERF}- ${commit}\n"
            elif [[ $commit == *"test:"* ]] || [[ $commit == *"test("* ]]; then
              TESTS="${TESTS}- ${commit}\n"
            elif [[ $commit == *"ci:"* ]] || [[ $commit == *"ci("* ]]; then
              CI="${CI}- ${commit}\n"
            else
              OTHER="${OTHER}- ${commit}\n"
            fi
          done < <(git log ${PREVIOUS_TAG}..HEAD --oneline --no-merges)

          # Add sections if they have content
          if [ -n "$FEATURES" ]; then
            echo "### ✨ New Features" >> changelog_temp.md
            echo -e "$FEATURES" >> changelog_temp.md
          fi

          if [ -n "$FIXES" ]; then
            echo "### 🐛 Bug Fixes" >> changelog_temp.md
            echo -e "$FIXES" >> changelog_temp.md
          fi

          if [ -n "$DOCS" ]; then
            echo "### 📚 Documentation" >> changelog_temp.md
            echo -e "$DOCS" >> changelog_temp.md
          fi

          if [ -n "$STYLE" ]; then
            echo "### 🎨 Code Style & Refactoring" >> changelog_temp.md
            echo -e "$STYLE" >> changelog_temp.md
          fi

          if [ -n "$PERF" ]; then
            echo "### ⚡ Performance Improvements" >> changelog_temp.md
            echo -e "$PERF" >> changelog_temp.md
          fi

          if [ -n "$TESTS" ]; then
            echo "### 🧪 Tests" >> changelog_temp.md
            echo -e "$TESTS" >> changelog_temp.md
          fi

          if [ -n "$CI" ]; then
            echo "### 🔧 CI/CD" >> changelog_temp.md
            echo -e "$CI" >> changelog_temp.md
          fi

          if [ -n "$OTHER" ]; then
            echo "### 🔄 Other Changes" >> changelog_temp.md
            echo -e "$OTHER" >> changelog_temp.md
          fi

          # Add build and deployment info
          cat >> changelog_temp.md << EOF

          ### 🏗️ Build Information
          - **Node.js Version**: ${{ env.NODE_VERSION }}
          - **Hugo Version**: ${{ env.HUGO_VERSION }}
          - **Build Date**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit SHA**: ${{ github.sha }}

          ### 🔗 Links
          - [📊 Full Changelog](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${NEW_TAG})
          - [🌐 Live Site](https://techishthoughts.github.io)
          - [📦 Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

          # Set output for use in other steps
          echo "changelog_created=true" >> $GITHUB_OUTPUT
          echo "changelog_file=changelog_temp.md" >> $GITHUB_OUTPUT

          echo "✅ Changelog generated successfully"

      - name: 🎉 Create GitHub Release
        if: steps.tag_version.outputs.new_tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: 'Release ${{ steps.tag_version.outputs.new_tag }}'
          body: |
            ## 🚀 Tech.ish Thoughts - Release ${{ steps.tag_version.outputs.new_tag }}

            ### 📅 Release Information
            - **Release Date**: ${{ steps.tag_version.outputs.release_date }}
            - **Previous Version**: ${{ steps.analyze_commits.outputs.latest_tag }}
            - **Version Bump**: ${{ steps.analyze_commits.outputs.bump_type }}

            ### 🔄 Changes
            This release includes all commits since ${{ steps.analyze_commits.outputs.latest_tag }}.

            ### 🏗️ Build Details
            - **Node.js**: v${{ env.NODE_VERSION }}
            - **Hugo**: v${{ env.HUGO_VERSION }}
            - **Commit**: ${{ github.sha }}

            ### 🔗 Quick Links
            - [🌐 Live Site](https://techishthoughts.github.io)
            - [📊 Full Changelog](https://github.com/${{ github.repository }}/compare/${{ steps.analyze_commits.outputs.latest_tag }}...${{ steps.tag_version.outputs.new_tag }})
            - [📦 Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *Automatically generated release from CI/CD pipeline*
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            HUGO_VALIDATION_FIXES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Update Package Version
        if: steps.tag_version.outputs.new_tag
        run: |
          echo "📊 Updating package.json version to match tag..."
          NEW_VERSION="${{ steps.tag_version.outputs.new_tag }}"
          # Remove 'v' prefix if present
          CLEAN_VERSION=${NEW_VERSION#v}

          # Update package.json version
          npm version $CLEAN_VERSION --no-git-tag-version

          echo "✅ Updated package.json version to $CLEAN_VERSION"

      - name: 📤 Commit Version Update
        if: steps.tag_version.outputs.new_tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.tag_version.outputs.new_tag }}" || exit 0
          git push origin main

  deploy:
    name: 🚀 Deploy to GitHub Pages
    needs: [validate, test, build, tag]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📥 Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: hugo-site
          path: public

      - name: 🔍 Verify Build Artifact
        run: |
          echo "🔍 Verifying downloaded site artifact..."
          if [ -d "public" ] && [ "$(ls -A public)" ]; then
            echo "✅ Hugo site artifact downloaded successfully"
            echo "📊 Total files: $(find public -type f | wc -l)"
            echo "📦 Total size: $(du -sh public/ | cut -f1)"

            # Check for essential files
            if [ -f "public/index.html" ]; then
              echo "✅ Homepage found"
            else
              echo "⚠️  Homepage not found"
            fi
          else
            echo "❌ Hugo site artifact is empty or missing"
            exit 1
          fi

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v5

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: ✅ Verify Deployment
        run: |
          echo "🌐 Site deployed to: ${{ steps.deployment.outputs.page_url }}"
          echo "🎉 Deployment completed successfully!"

  notify:
    name: 📬 Send Notifications
    needs: [validate, test, build, tag, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📊 Create Job Summary
        run: |
          echo "# 🚀 Tech.ish Thoughts - Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Job Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation | ${{ needs.validate.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Testing | ${{ needs.test.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Tagging | ${{ needs.tag.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deploy | ${{ needs.deploy.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add release information if a tag was created
          if [ "${{ needs.tag.outputs.new_tag }}" != "" ]; then
            echo "## 🎉 New Release Created" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ needs.tag.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release URL**: [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.tag.outputs.new_tag }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "## 🔗 Important Links" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 [Live Site](https://techishthoughts.github.io)" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 [Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
            echo "- 📈 [Performance Report](https://pagespeed.web.dev/analysis/https-techishthoughts-github-io/)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔄 Change Details" >> $GITHUB_STEP_SUMMARY
          echo "**📝 Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "**👤 Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**📅 Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.head_commit.message }}" != "" ]; then
            echo "**💬 Message**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Hugo Version**: ${{ env.HUGO_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on Pull Request
        if: github.event_name == 'pull_request' && needs.build.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🚀 Build Status')
            );

            const buildStatus = {
              validate: '${{ needs.validate.result }}',
              test: '${{ needs.test.result }}',
              build: '${{ needs.build.result }}',
              tag: '${{ needs.tag.result }}'
            };

            const statusEmoji = {
              success: '✅',
              failure: '❌',
              cancelled: '⏹️',
              skipped: '⏭️'
            };

            const commentBody = \`
            ## 🚀 Build Status - Tech.ish Thoughts

            | Stage | Status | Result |
            |-------|--------|--------|
            | 🔍 Validation | \${statusEmoji[buildStatus.validate] || '❓'} | \${buildStatus.validate} |
            | 🧪 Testing | \${statusEmoji[buildStatus.test] || '❓'} | \${buildStatus.test} |
            | 🏗️ Build | \${statusEmoji[buildStatus.build] || '❓'} | \${buildStatus.build} |
            | 🏷️ Tagging | \${statusEmoji[buildStatus.tag] || '❓'} | \${buildStatus.tag} |

            ### 📊 Summary
            \${buildStatus.build === 'success' ?
              '✅ **Your changes have been successfully built and validated!**' :
              '❌ **Build failed. Please check the logs for details.**'
            }

            ### 🔄 Next Steps
            \${buildStatus.build === 'success' ?
              \`- 👀 Review the changes carefully
              - 🧪 All tests are passing
              - 🚀 Ready to merge when approved\` :
              \`- 🔍 Check the build logs for error details
              - 🛠️ Fix any issues and push updates
              - 🔄 The build will run automatically on new commits\`
            }

            ### 📈 Artifacts
            - 📊 [Build Report](https://github.com/\${context.repo.owner}/\${context.repo.repo}/actions/runs/\${context.runId})
            - 🧪 [Test Results](https://github.com/\${context.repo.owner}/\${context.repo.repo}/actions/runs/\${context.runId})

            ---
            *This comment is automatically updated on each commit.*
            \`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: 📧 Notify on Success
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 Site is live at: https://techishthoughts.github.io"
          echo "📊 Build completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 View build details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 📧 Notify on Failure
        if: failure()
        run: |
          echo "❌ Build or deployment failed!"
          echo "🔍 Check the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "🛠️  Common troubleshooting steps:"
          echo "  1. Verify all markdown files have proper front matter"
          echo "  2. Check author data structure in data/authors.json"
          echo "  3. Ensure all required fields are present in posts"
          echo "  4. Verify TypeScript compilation errors"
          echo "  5. Check for broken internal links"
          echo ""
          echo "📚 For help, visit: https://github.com/${{ github.repository }}/issues"
